/* Parser generated by language.js (see Makefile) */

var compiledGrammar = {"table":[[0,"source",1],[0,"start",2],[0,"sql_stmt_list",3],[7,4],[4,5,6,5,7],[0,"whitespace",8],[8,9],[0,"semicolon",10],[6,11],[0,"sql_stmt",12],[5,";"],[2,"[ \\t\\n\\r]"],[3,13,14],[4,15,16],[0,"update_stmt",17],[8,18],[0,"select_stmt",19],[4,20,21],[4,22,23],[4,24,25,26],[4,27,28,29],[4,30,31,32],[0,"EXPLAIN",33],[8,34],[4,35,36],[8,37],[8,38],[0,"UPDATE",39],[8,40],[0,"qualified_table_name",41],[0,"SET",42],[7,43],[8,44],[4,5,45],[4,46,47],[0,"select_core",48],[6,49],[4,50,51,52,53],[4,54,55,56],[4,5,57],[4,58,59],[4,60,61],[4,62,63],[4,64,65],[4,66,55],[5,"EXPLAIN"],[0,"QUERY",67],[0,"PLAN",68],[4,69,70,71,72,32,73],[4,74,35],[0,"ORDER",75],[0,"BY",76],[0,"ordering_term",77],[6,78],[0,"LIMIT",79],[0,"expr",80],[8,81],[5,"UPDATE"],[0,"OR",82],[3,83,84,85,86,87],[0,"table_ref",88],[8,89],[0,"whitespace1",90],[5,"SET"],[4,91,92,55],[0,"comma",93],[0,"WHERE",94],[4,62,95],[4,62,96],[0,"SELECT",97],[8,98],[0,"select_results",99],[8,100],[8,101],[0,"compound_operator",102],[4,62,103],[4,62,104],[4,5,105],[4,5,65,52],[4,62,106],[4,5,107],[4,108,55],[4,62,109],[0,"ROLLBACK",110],[0,"ABORT",111],[0,"REPLACE",112],[0,"FAIL",113],[0,"IGNORE",114],[4,115,116],[3,117,118],[7,11],[0,"column_name",119],[0,"equal",120],[5,","],[4,62,121],[5,"QUERY"],[5,"PLAN"],[4,5,122],[3,123,124],[4,125,126],[4,127,128],[4,129,51,130,131],[3,132,133,134],[5,"ORDER"],[5,"BY"],[4,55,135,136],[5,"LIMIT"],[3,137,138,139,140,141,142,143,144],[3,145,65],[5,"OR"],[4,62,146],[4,62,147],[4,5,148],[4,62,149],[4,62,150],[8,151],[0,"table_name",119],[4,152,51,153],[4,154,152],[0,"name",155],[5,"="],[5,"WHERE"],[5,"SELECT"],[0,"DISTINCT",156],[0,"ALL",157],[0,"select_result",158],[6,159],[0,"FROM",160],[0,"join_source",161],[0,"GROUP",162],[7,163],[8,164],[4,165,166],[0,"INTERSECT",167],[0,"EXCEPT",168],[8,169],[8,170],[4,144,171,55],[4,144,172,173],[4,144,174,175,55,176],[4,144,177],[4,144,178,174,55],[4,144,174,179,55,180,55],[4,144,174,181,182],[0,"value",183],[0,"OFFSET",184],[5,"ROLLBACK"],[5,"ABORT"],[5,"REPLACE"],[5,"FAIL"],[5,"IGNORE"],[4,185,186],[0,"INDEXED",187],[0,"index_name",119],[0,"NOT",188],[7,189],[4,62,190],[4,62,191],[4,5,192],[4,5,65,125],[4,62,193],[4,5,194,195],[4,62,196],[4,52,65],[4,197,55],[0,"UNION",198],[8,124],[4,62,199],[4,62,200],[4,172,173],[3,201,202],[0,"binary_operator",203],[0,"COLLATE",204],[0,"collation_name",119],[8,154],[3,205,206,207,208],[8,209],[3,210,211,212],[0,"IS",213],[0,"BETWEEN",214],[0,"AND",215],[0,"IN",216],[3,217,60],[4,5,218],[4,62,219],[0,"database_name",119],[0,"dot",220],[4,62,221],[4,62,222],[2,"[A-Za-z0-9_]"],[5,"DISTINCT"],[5,"ALL"],[3,223,224,225],[5,"FROM"],[0,"single_source",226],[6,227],[5,"GROUP"],[0,"HAVING",228],[4,62,229],[5,"INTERSECT"],[5,"EXCEPT"],[0,"ASC",230],[0,"DESC",231],[4,5,232],[4,62,233],[0,"LIKE",234],[0,"GLOB",235],[0,"REGEXP",236],[0,"MATCH",237],[4,238,55],[0,"ISNULL",239],[0,"NOTNULL",240],[4,154,241],[4,62,242],[4,62,243],[4,62,244],[4,62,245],[4,246,247,248],[3,249,250,251,91,252,253,254,255,256,257,258],[5,"OFFSET"],[5,"."],[5,"INDEXED"],[5,"NOT"],[4,259,260],[4,116,186,225],[0,"star",261],[3,262,263,264,116,265,266,267],[4,268,5,194,269],[4,62,270],[5,"UNION"],[4,62,271],[4,62,272],[3,273,261,274,275,276,277,278,279,280,281,282,283,284,285,120,286,287,288,289,290,291,292,293,294,295,296,297],[5,"COLLATE"],[4,62,298],[4,62,299],[4,62,300],[4,62,301],[0,"ESCAPE",302],[4,62,303],[4,62,304],[0,"NULL",305],[5,"IS"],[5,"BETWEEN"],[5,"AND"],[5,"IN"],[0,"lparen",306],[8,307],[0,"rparen",308],[0,"literal_value",309],[0,"bind_parameter",310],[4,116,186,91],[4,311,55],[0,"call_function",312],[4,5,246,55,5,248],[4,313,246,55,314,315,248],[4,316,246,16,248],[4,317,318,319,320,321],[0,"raise_function",322],[0,"column_ref",55],[8,323],[5,"*"],[4,185,186,116,314,62,324],[4,185,186,116],[4,116,314,62,324],[4,325,326],[4,246,16,248,327],[4,246,128,248],[0,"join_op",328],[0,"join_constraint",329],[5,"HAVING"],[5,"ASC"],[5,"DESC"],[5,"||"],[5,"/"],[5,"%"],[5,"+"],[5,"-"],[5,"<<"],[5,">>"],[5,"&"],[5,"|"],[5,"<="],[5,">="],[5,"<"],[5,">"],[5,"=="],[5,"!="],[5,"<>"],[5,"IS"],[5,"IS NOT"],[5,"IN"],[5,"LIKE"],[5,"GLOB"],[5,"MATCH"],[5,"REGEXP"],[5,"AND"],[5,"OR"],[5,"LIKE"],[5,"GLOB"],[5,"REGEXP"],[5,"MATCH"],[4,62,330],[5,"ISNULL"],[5,"NOTNULL"],[4,62,331],[5,"("],[3,16,332],[5,")"],[3,333,334,335,241,336,337,338],[4,339,119],[0,"unary_operator",340],[4,341,5,246,342,5,248],[0,"CAST",343],[0,"AS",344],[0,"type_name",345],[8,346],[0,"CASE",347],[8,55],[7,348],[8,349],[0,"END",350],[4,351,246,352,248],[4,314,5,353],[0,"table_alias",119],[4,60,354],[8,355],[8,356],[3,357,358],[8,359],[5,"ESCAPE"],[5,"NULL"],[7,360],[0,"numeric_literal",361],[0,"string_literal",362],[0,"blob_literal",334],[0,"CURRENT_TIME",363],[0,"CURRENT_DATE",363],[0,"CURRENT_TIMESTAMP",363],[5,"?"],[4,5,364],[0,"function_name",119],[8,365],[4,62,366],[4,62,367],[4,368,369],[4,174,370],[4,62,371],[4,372,55,373,55],[4,374,55],[4,62,375],[0,"RAISE",376],[3,87,377],[0,"column_alias",119],[8,378],[3,379,118],[4,314,5,324],[4,5,65],[4,380,381,382],[3,383,384],[4,55,65],[4,385,386],[4,387,388,387],[5,"now"],[3,277,276,389,390],[3,391,392],[5,"CAST"],[5,"AS"],[7,119],[8,393],[0,"EXISTS",394],[5,"CASE"],[0,"WHEN",395],[0,"THEN",396],[0,"ELSE",397],[5,"END"],[4,62,398],[4,399,65,400],[4,314,62,324],[4,152,51,5,153],[8,401],[8,402],[0,"JOIN",403],[4,404,55],[4,405,5,246,406,5,248],[3,407,408],[8,409],[5,"\""],[6,410],[5,"~"],[5,"NOT"],[4,411,412],[4,5,225],[3,413,414],[4,62,415],[4,62,416],[4,62,417],[4,62,418],[5,"RAISE"],[3,83,84,86],[0,"error_message",334],[0,"NATURAL",419],[3,420,421,422],[4,62,423],[0,"ON",424],[0,"USING",425],[4,5,91,426],[4,427,428],[4,429,427],[4,430,431,427],[3,432,433],[8,123],[7,434],[4,246,435,248],[4,246,435,65,435,248],[5,"EXISTS"],[5,"WHEN"],[5,"THEN"],[5,"ELSE"],[4,62,436],[4,437,438],[0,"INNER",439],[0,"CROSS",440],[5,"JOIN"],[4,62,441],[4,62,442],[6,443],[7,444],[8,408],[0,"decimal_point",186],[0,"E",445],[8,446],[0,"escape_char",447],[2,"[^\"]"],[4,55,448],[0,"signed_number",449],[5,"NATURAL"],[0,"LEFT",450],[8,451],[4,62,452],[4,62,453],[5,"ON"],[5,"USING"],[4,5,65,5,91],[0,"digit",454],[5,"E"],[3,455,456],[4,457,458],[6,459],[4,431,333],[4,62,460],[0,"OUTER",461],[5,"INNER"],[5,"CROSS"],[2,"[0-9]"],[0,"plus",276],[0,"minus",277],[5,"\\"],[1],[4,5,65,55],[5,"LEFT"],[4,62,462],[5,"OUTER"],[0,"%start",464],[0,"%sql_stmt_list",465],[7,466],[4,467,468,467,469],[0,"%whitespace",8],[8,470],[0,"%semicolon",10],[0,"%sql_stmt",471],[3,472,473],[4,474,475],[0,"%update_stmt",476],[8,477],[0,"%select_stmt",478],[4,479,480],[4,481,482],[4,483,484,485],[4,486,487,488],[4,489,490,491],[0,"%EXPLAIN",492],[8,493],[4,494,495],[8,496],[8,497],[0,"%UPDATE",498],[8,499],[0,"%qualified_table_name",500],[0,"%SET",501],[7,502],[8,503],[4,467,45],[4,504,505],[0,"%select_core",506],[6,507],[4,508,509,510,511],[4,512,513,514],[4,467,57],[4,515,516],[4,517,518],[4,519,63],[4,520,521],[4,522,513],[0,"%QUERY",523],[0,"%PLAN",524],[4,525,526,527,528,491,529],[4,530,494],[0,"%ORDER",531],[0,"%BY",532],[0,"%ordering_term",533],[6,534],[0,"%LIMIT",535],[0,"%expr",536],[8,537],[0,"%OR",538],[3,539,540,541,542,543],[0,"%table_ref",544],[8,545],[0,"%whitespace1",90],[4,546,547,513],[0,"%comma",93],[0,"%WHERE",548],[4,519,95],[4,519,96],[0,"%SELECT",549],[8,550],[0,"%select_results",551],[8,552],[8,553],[0,"%compound_operator",554],[4,519,103],[4,519,104],[4,467,555],[4,467,521,510],[4,519,106],[4,467,556],[4,557,513],[4,519,109],[0,"%ROLLBACK",558],[0,"%ABORT",559],[0,"%REPLACE",560],[0,"%FAIL",561],[0,"%IGNORE",562],[4,563,564],[3,565,566],[0,"%column_name",567],[0,"%equal",120],[4,519,121],[4,467,122],[3,568,569],[4,570,571],[4,572,573],[4,574,509,575,576],[3,577,578,579],[4,513,580,581],[3,582,583,584,585,586,587,588,589],[3,590,521],[4,519,146],[4,519,147],[4,467,148],[4,519,149],[4,519,150],[8,591],[0,"%table_name",567],[4,592,509,593],[4,594,592],[0,"%name",155],[0,"%DISTINCT",595],[0,"%ALL",596],[0,"%select_result",597],[6,598],[0,"%FROM",599],[0,"%join_source",600],[0,"%GROUP",601],[7,602],[8,603],[4,604,605],[0,"%INTERSECT",606],[0,"%EXCEPT",607],[8,608],[8,609],[4,589,610,513],[4,589,611,612],[4,589,613,614,513,615],[4,589,616],[4,589,617,613,513],[4,589,613,618,513,619,513],[4,589,613,620,621],[0,"%value",622],[0,"%OFFSET",623],[4,624,625],[0,"%INDEXED",626],[0,"%index_name",567],[0,"%NOT",627],[4,519,190],[4,519,191],[4,467,628],[4,467,521,570],[4,519,193],[4,467,629,630],[4,519,196],[4,510,521],[4,631,513],[0,"%UNION",632],[8,569],[4,519,199],[4,519,200],[4,611,612],[3,633,634],[0,"%binary_operator",635],[0,"%COLLATE",636],[0,"%collation_name",567],[8,594],[3,637,638,639,640],[8,641],[3,642,643,644],[0,"%IS",645],[0,"%BETWEEN",646],[0,"%AND",647],[0,"%IN",648],[3,649,517],[4,467,650],[4,519,219],[0,"%database_name",567],[0,"%dot",220],[4,519,221],[4,519,222],[3,651,652,653],[0,"%single_source",654],[6,655],[0,"%HAVING",656],[4,519,229],[0,"%ASC",657],[0,"%DESC",658],[4,467,232],[4,519,233],[0,"%LIKE",659],[0,"%GLOB",660],[0,"%REGEXP",661],[0,"%MATCH",662],[4,663,513],[0,"%ISNULL",664],[0,"%NOTNULL",665],[4,594,666],[4,519,242],[4,519,243],[4,519,244],[4,519,245],[4,667,668,669],[3,670,671,672,546,673,674,675,676,677,678,679],[4,680,681],[4,564,625,653],[0,"%star",261],[3,682,683,684,564,685,686,687],[4,688,467,629,689],[4,519,270],[4,519,271],[4,519,272],[4,519,298],[4,519,299],[4,519,300],[4,519,301],[0,"%ESCAPE",690],[4,519,303],[4,519,304],[0,"%NULL",691],[0,"%lparen",306],[8,692],[0,"%rparen",308],[0,"%literal_value",693],[0,"%bind_parameter",694],[4,564,625,546],[4,695,513],[0,"%call_function",696],[4,467,667,513,467,669],[4,697,667,513,698,699,669],[4,700,667,475,669],[4,701,702,703,704,705],[0,"%raise_function",706],[0,"%column_ref",513],[8,707],[4,624,625,564,698,519,708],[4,624,625,564],[4,564,698,519,708],[4,709,710],[4,667,475,669,711],[4,667,573,669],[0,"%join_op",712],[0,"%join_constraint",713],[4,519,330],[4,519,331],[3,475,714],[3,715,716,717,666,718,719,720],[4,339,567],[0,"%unary_operator",721],[4,722,467,667,723,467,669],[0,"%CAST",724],[0,"%AS",725],[0,"%type_name",726],[8,727],[0,"%CASE",728],[8,513],[7,729],[8,730],[0,"%END",731],[4,732,667,733,669],[4,698,467,734],[0,"%table_alias",567],[4,517,735],[8,736],[8,737],[3,738,739],[8,740],[7,741],[0,"%numeric_literal",742],[0,"%string_literal",743],[0,"%blob_literal",716],[0,"%CURRENT_TIME",363],[0,"%CURRENT_DATE",363],[0,"%CURRENT_TIMESTAMP",363],[4,467,364],[0,"%function_name",567],[8,744],[4,519,366],[4,519,367],[4,745,746],[4,613,747],[4,519,371],[4,748,513,749,513],[4,750,513],[4,519,375],[0,"%RAISE",751],[3,543,752],[0,"%column_alias",567],[8,753],[3,754,566],[4,698,467,708],[4,467,521],[4,755,756,757],[3,758,759],[4,513,521],[4,760,761],[4,387,762,387],[3,763,764],[7,567],[8,765],[0,"%EXISTS",766],[0,"%WHEN",767],[0,"%THEN",768],[0,"%ELSE",769],[4,519,398],[4,770,521,771],[4,698,519,708],[4,592,509,467,593],[8,772],[8,773],[0,"%JOIN",774],[4,775,513],[4,776,467,667,777,467,669],[3,778,779],[8,780],[6,781],[4,782,783],[4,467,653],[3,784,785],[4,519,415],[4,519,416],[4,519,417],[4,519,418],[3,539,540,542],[0,"%error_message",716],[0,"%NATURAL",786],[3,787,788,789],[4,519,423],[0,"%ON",790],[0,"%USING",791],[4,467,546,792],[4,793,794],[4,795,793],[4,796,797,793],[3,798,433],[8,568],[7,799],[4,667,800,669],[4,667,800,521,800,669],[4,519,436],[4,801,802],[0,"%INNER",803],[0,"%CROSS",804],[4,519,441],[4,519,442],[6,805],[7,806],[8,779],[0,"%decimal_point",625],[0,"%E",445],[8,807],[0,"%escape_char",447],[4,513,808],[0,"%signed_number",809],[0,"%LEFT",810],[8,811],[4,519,452],[4,519,453],[4,467,521,467,546],[0,"%digit",454],[3,812,813],[6,814],[4,797,715],[4,519,460],[0,"%OUTER",815],[0,"%plus",276],[0,"%minus",277],[4,467,521,513],[4,519,462]],"nameToUID":{"start":1,"sql_stmt_list":2,"whitespace":5,"semicolon":7,"sql_stmt":9,"update_stmt":14,"select_stmt":16,"EXPLAIN":22,"UPDATE":27,"qualified_table_name":29,"SET":30,"select_core":35,"QUERY":46,"PLAN":47,"ORDER":50,"BY":51,"ordering_term":52,"LIMIT":54,"expr":55,"OR":58,"table_ref":60,"whitespace1":62,"comma":65,"WHERE":66,"SELECT":69,"select_results":71,"compound_operator":74,"ROLLBACK":83,"ABORT":84,"REPLACE":85,"FAIL":86,"IGNORE":87,"column_name":91,"equal":92,"table_name":116,"name":119,"DISTINCT":123,"ALL":124,"select_result":125,"FROM":127,"join_source":128,"GROUP":129,"INTERSECT":133,"EXCEPT":134,"value":144,"OFFSET":145,"INDEXED":152,"index_name":153,"NOT":154,"UNION":165,"binary_operator":171,"COLLATE":172,"collation_name":173,"IS":178,"BETWEEN":179,"AND":180,"IN":181,"database_name":185,"dot":186,"single_source":194,"HAVING":197,"ASC":201,"DESC":202,"LIKE":205,"GLOB":206,"REGEXP":207,"MATCH":208,"ISNULL":210,"NOTNULL":211,"star":225,"ESCAPE":238,"NULL":241,"lparen":246,"rparen":248,"literal_value":249,"bind_parameter":250,"call_function":253,"raise_function":258,"column_ref":259,"join_op":268,"join_constraint":269,"unary_operator":311,"CAST":313,"AS":314,"type_name":315,"CASE":317,"END":321,"table_alias":324,"numeric_literal":333,"string_literal":334,"blob_literal":335,"CURRENT_TIME":336,"CURRENT_DATE":337,"CURRENT_TIMESTAMP":338,"function_name":341,"RAISE":351,"column_alias":353,"EXISTS":370,"WHEN":372,"THEN":373,"ELSE":374,"JOIN":382,"error_message":400,"NATURAL":401,"ON":404,"USING":405,"INNER":421,"CROSS":422,"decimal_point":429,"E":430,"escape_char":432,"signed_number":435,"LEFT":437,"digit":444,"OUTER":451,"plus":455,"minus":456,"%start":463,"%sql_stmt_list":464,"%whitespace":467,"%semicolon":469,"%sql_stmt":470,"%update_stmt":473,"%select_stmt":475,"%EXPLAIN":481,"%UPDATE":486,"%qualified_table_name":488,"%SET":489,"%select_core":494,"%QUERY":504,"%PLAN":505,"%ORDER":508,"%BY":509,"%ordering_term":510,"%LIMIT":512,"%expr":513,"%OR":515,"%table_ref":517,"%whitespace1":519,"%comma":521,"%WHERE":522,"%SELECT":525,"%select_results":527,"%compound_operator":530,"%ROLLBACK":539,"%ABORT":540,"%REPLACE":541,"%FAIL":542,"%IGNORE":543,"%column_name":546,"%equal":547,"%table_name":564,"%name":567,"%DISTINCT":568,"%ALL":569,"%select_result":570,"%FROM":572,"%join_source":573,"%GROUP":574,"%INTERSECT":578,"%EXCEPT":579,"%value":589,"%OFFSET":590,"%INDEXED":592,"%index_name":593,"%NOT":594,"%UNION":604,"%binary_operator":610,"%COLLATE":611,"%collation_name":612,"%IS":617,"%BETWEEN":618,"%AND":619,"%IN":620,"%database_name":624,"%dot":625,"%single_source":629,"%HAVING":631,"%ASC":633,"%DESC":634,"%LIKE":637,"%GLOB":638,"%REGEXP":639,"%MATCH":640,"%ISNULL":642,"%NOTNULL":643,"%star":653,"%ESCAPE":663,"%NULL":666,"%lparen":667,"%rparen":669,"%literal_value":670,"%bind_parameter":671,"%call_function":674,"%raise_function":679,"%column_ref":680,"%join_op":688,"%join_constraint":689,"%unary_operator":695,"%CAST":697,"%AS":698,"%type_name":699,"%CASE":701,"%END":705,"%table_alias":708,"%numeric_literal":715,"%string_literal":716,"%blob_literal":717,"%CURRENT_TIME":718,"%CURRENT_DATE":719,"%CURRENT_TIMESTAMP":720,"%function_name":722,"%RAISE":732,"%column_alias":734,"%EXISTS":747,"%WHEN":748,"%THEN":749,"%ELSE":750,"%JOIN":757,"%error_message":771,"%NATURAL":772,"%ON":775,"%USING":776,"%INNER":788,"%CROSS":789,"%decimal_point":795,"%E":796,"%escape_char":798,"%signed_number":800,"%LEFT":801,"%digit":806,"%OUTER":811,"%plus":812,"%minus":813}};


function Parser(/*String | CompiledGrammar*/ aGrammar)
{
    if (typeof aGrammar.valueOf() === "string")
        this.compiledGrammar = new (require("./compiledgrammar"))(aGrammar);
    else
        this.compiledGrammar = aGrammar;

    return this;
}

module.exports = Parser;

Parser.prototype.parse = function(input)
{
    return parse(this.compiledGrammar, input);
}

var NAME                = 0,
    DOT                 = 1,
    CHARACTER_CLASS     = 2,
    ORDERED_CHOICE      = 3,
    SEQUENCE            = 4,
    STRING_LITERAL      = 5,
    ZERO_OR_MORE        = 6,
    ONE_OR_MORE         = 7,
    OPTIONAL            = 8,
    NEGATIVE_LOOK_AHEAD = 9,
    POSITIVE_LOOK_AHEAD = 10,
    ERROR_NAME          = 11,
    ERROR_CHOICE        = 12;

function parse(aCompiledGrammar, input, name)
{
    var node = new SyntaxNode("#document", input, 0, 0),
        table = aCompiledGrammar.table,
        nameToUID = aCompiledGrammar.nameToUID;

    name = name || "start";

    // This is a stupid check.
    if (aCompiledGrammar.nameToUID["EOF"] !== undefined)
        table[0] = [SEQUENCE, nameToUID[name], nameToUID["EOF"]];

    if (!evaluate(new context(input, table), node, table, 0))
    {
        // This is a stupid check.
        if (aCompiledGrammar.nameToUID["EOF"] !== undefined)
            table[0] = [SEQUENCE, nameToUID["%" + name], nameToUID["EOF"]];

        node.children.length = 0;

        evaluate(new context(input, table), node, table, 0);

        node.traverse(
        {
            traverseTextNodes:false,
            enteredNode:function(node)
            {
                if (node.error)
                    console.log(node.message() + "\n");
            }
        });
    }

    return node;
}

exports.parse = parse;

function context(input, table)
{
    this.position = 0;
    this.input = input;
    this.memos = [];
    for (var i=0;i<table.length;++i)
        this.memos[i] = [];
}

function evaluate(context, parent, rules, rule_id)
{
    var rule = rules[rule_id],
        type = rule[0],
        input_length = context.input.length,
        memos = context.memos[rule_id];

    var uid = context.position,
        entry = memos[uid];

    if (entry === false)
        return false;
    else if (entry === true)
        return true;
    else if (entry)
    {
        if (parent)
            parent.children.push(entry.node);
        context.position = entry.position;
        return true;
    }

    switch (type)
    {
        case NAME:
        case ERROR_NAME:
            var node = new SyntaxNode(rule[1], context.input, context.position, 0, rule[3]);
            if (!evaluate(context, node, rules, rule[2]))
            {
                memos[uid] = false;
                return false;
            }
            node.range.length = context.position - node.range.location;
            memos[uid] = { node:node, position:context.position };

            if (parent)
                parent.children.push(node);
            return true;

        case CHARACTER_CLASS:
            var character = context.input.charAt(context.position);

            if (typeof rule[1].valueOf() === "string")
                rule[1] = new RegExp(rule[1], "g");

            if (character.match(rule[1]))
            {
                if (parent)
                    parent.children.push(character);
                ++context.position;
                return true;
            }
            memos[uid] = false;
            return false;

        case SEQUENCE:
            var index = 1,
                count = rule.length;

            for (; index < count; ++index)
                if (!evaluate(context, parent, rules, rule[index]))
                {
                    memos[uid] = false;
                    return false;
                }

            return true;

        case ORDERED_CHOICE:
        case ERROR_CHOICE:
            var index = 1,
                count = rule.length,
                position = context.position;

            for (; index < count; ++index)
            {
                // cache opportunity here.
                var child_count = parent && parent.children.length;

                if (evaluate(context, parent, rules, rule[index]))
                    return true;

                if (parent)
                    parent.children.length = child_count;
                context.position = position;
            }
            memos[uid] = false;
            return false;

        case STRING_LITERAL:
            var string = rule[1],
                string_length = string.length;

            if (string_length + context.position > input_length)
            {
                memos[uid] = false;
                return false;
            }

            var index = 0;

            for (; index < string_length; ++context.position, ++index)
                if (context.input.charCodeAt(context.position) !== string.charCodeAt(index))
                {
                    context.position -= index;
                    memos[uid] = false;
                    return false;
                }

//            memos[uid] = string;
            if (parent)
                parent.children.push(string);

            return true;
        case DOT:
            if (context.position < input_length)
            {
                if (parent)
                    parent.children.push(context.input.charAt(context.position));
                ++context.position;
                return true;
            }
            memos[uid] = false;
            return false;
        case POSITIVE_LOOK_AHEAD:
        case NEGATIVE_LOOK_AHEAD:
            var position = context.position,
                result = evaluate(context, null, rules, rule[1]) === (type === POSITIVE_LOOK_AHEAD);
            context.position = position;
            memos[uid] = result;

            return result;

        case ZERO_OR_MORE:
            var child,
                position = context.position,
                childCount = parent && parent.children.length;

            while (evaluate(context, parent, rules, rule[1]))
            {
                position = context.position,
                childCount = parent && parent.children.length;
            }

            context.position = position;
            if (parent)
                parent.children.length = childCount;

            return true;

        case ONE_OR_MORE:
            var position = context.position,
                childCount = parent && parent.children.length;
            if (!evaluate(context, parent, rules, rule[1]))
            {
                memos[uid] = false;
                context.position = position;
                if (parent)
                    parent.children.length = childCount;
                return false;
            }
            position = context.position,
            childCount = parent && parent.children.length;
            while (evaluate(context, parent, rules, rule[1]))
            {
                position = context.position;
                childCount = parent && parent.children.length;
            }
            context.position = position;
            if (parent)
                parent.children.length = childCount;
            return true;

        case OPTIONAL:
            var position = context.position,
                childCount = parent && parent.children.length;

            if (!evaluate(context, parent, rules, rule[1]))
            {
                context.position = position;

                if (parent)
                    parent.children.length = childCount;
            }

            return true;
    }
}

function SyntaxNode(/*String*/ aName, /*String*/ aSource, /*Number*/ aLocation, /*Number*/ aLength, /*String*/anErrorMessage)
{
    this.name = aName;
    this.source = aSource;
    this.range = { location:aLocation, length:aLength };
    this.children = [];

    if (anErrorMessage)
        this.error = anErrorMessage;
}

SyntaxNode.prototype.report = function()
{
    var source = this.source,
        lineNumber = 1,
        index = 0,
        start = 0,
        length = source.length,
        range = this.range;

    for (; index < range.location; ++index)
        if (source.charAt(index) === '\n')
        {
            ++lineNumber;
            start = index + 1;
        }

    for (; index < length; ++index)
        if (source.charAt(index) === '\n')
            break;

    var visualization = source.substring(start, index) + "\n";

    visualization += (new Array(this.range.location - start + 1)).join(" ");
    visualization += (new Array(Math.min(range.length, visualization.length) + 1)).join("^");

    return  {
                visualization: visualization,
                lineNumber: lineNumber
            };
}

SyntaxNode.prototype.message = function()
{
    var report = this.report(),
        message = report.visualization + "\n";

    message += "ERROR line " + report.lineNumber + ": " + this.error;

    return message;
}

SyntaxNode.prototype.toString = function(/*String*/ spaces)
{
    if (!spaces)
        spaces = "";

    var string = spaces + this.name +  " <" + this.innerText() + "> ",
        children = this.children,
        index = 0,
        count = children.length;

    for (; index < count; ++index)
    {
        var child = children[index];

        if (typeof child === "string")
            string += "\n" + spaces + "\t" + child;

        else
            string += "\n" + children[index].toString(spaces + '\t');
    }

    return string;
}

SyntaxNode.prototype.innerText = function()
{
    var range = this.range;

    return this.source.substr(range.location, range.length);
}

SyntaxNode.prototype.traverse = function(walker)
{
    if (!walker.enteredNode || walker.enteredNode(this) !== false)
    {
        var children = this.children,
            index = 0,
            count = children && children.length;

        for (; index < count; ++index)
        {
            var child = children[index];

            if (typeof child !== "string")
                child.traverse(walker);

            else if (walker.traversesTextNodes)
            {
                walker.enteredNode(child);

                if (walker.exitedNode)
                    walker.exitedNode(child);
            }
        }
    }

    if (walker.exitedNode)
        walker.exitedNode(this);
}


if (typeof system !== "undefined")
{
    var parser = new Parser(compiledGrammar);

    exports.parse = function(input) { return parser.parse(input); }
}
else
    module.exports = new Parser(compiledGrammar);

