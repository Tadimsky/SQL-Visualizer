/* Parser generated by language.js (see Makefile) */

var compiledGrammar = {"table":[[0,"source",1],[0,"start",2],[0,"sql_stmt_list",3],[7,4],[4,5,6,5,7],[0,"whitespace",8],[8,9],[0,"semicolon",10],[6,11],[0,"sql_stmt",12],[5,";"],[2,"[ \\t\\n\\r]"],[4,13,14],[8,15],[0,"select_stmt",16],[4,17,18],[4,19,20,21],[0,"EXPLAIN",22],[8,23],[4,24,25],[8,26],[8,27],[4,5,28],[4,29,30],[0,"select_core",31],[6,32],[4,33,34,35,36],[4,37,38,39],[5,"EXPLAIN"],[0,"QUERY",40],[0,"PLAN",41],[4,42,43,44,45,46,47],[4,48,24],[0,"ORDER",49],[0,"BY",50],[0,"ordering_term",51],[6,52],[0,"LIMIT",53],[0,"expr",54],[8,55],[4,56,57],[4,56,58],[0,"SELECT",59],[8,60],[0,"select_results",61],[8,62],[8,63],[8,64],[0,"compound_operator",65],[4,56,66],[4,56,67],[4,5,68],[4,5,69,35],[4,56,70],[4,5,71],[4,72,38],[0,"whitespace1",73],[5,"QUERY"],[5,"PLAN"],[4,5,74],[3,75,76],[4,77,78],[4,79,80],[4,81,38],[4,82,34,83,84],[3,85,86,87],[5,"ORDER"],[5,"BY"],[4,38,88,89],[0,"comma",90],[5,"LIMIT"],[3,91,92,93,94,95,96,97,98],[3,99,69],[7,11],[5,"SELECT"],[0,"DISTINCT",100],[0,"ALL",101],[0,"select_result",102],[6,103],[0,"FROM",104],[0,"join_source",105],[0,"WHERE",106],[0,"GROUP",107],[7,108],[8,109],[4,110,111],[0,"INTERSECT",112],[0,"EXCEPT",113],[8,114],[8,115],[5,","],[4,98,116,38],[4,98,117,118],[4,98,119,120,38,121],[4,98,122],[4,98,123,119,38],[4,98,119,124,38,125,38],[4,98,119,126,127],[0,"value",128],[0,"OFFSET",129],[4,56,130],[4,56,131],[4,5,132],[4,5,69,77],[4,56,133],[4,5,134,135],[4,56,136],[4,56,137],[4,35,69],[4,138,38],[0,"UNION",139],[8,76],[4,56,140],[4,56,141],[4,117,118],[3,142,143],[0,"binary_operator",144],[0,"COLLATE",145],[0,"collation_name",146],[8,147],[3,148,149,150,151],[8,152],[3,153,154,155],[0,"IS",156],[0,"BETWEEN",157],[0,"AND",158],[0,"IN",159],[3,160,161],[4,5,162],[4,56,163],[5,"DISTINCT"],[5,"ALL"],[3,164,165,166],[5,"FROM"],[0,"single_source",167],[6,168],[5,"WHERE"],[5,"GROUP"],[0,"HAVING",169],[4,56,170],[5,"INTERSECT"],[5,"EXCEPT"],[0,"ASC",171],[0,"DESC",172],[4,5,173],[4,56,174],[0,"name",175],[0,"NOT",176],[0,"LIKE",177],[0,"GLOB",178],[0,"REGEXP",179],[0,"MATCH",180],[4,181,38],[0,"ISNULL",182],[0,"NOTNULL",183],[4,147,184],[4,56,185],[4,56,186],[4,56,187],[4,56,188],[4,189,190,191],[0,"table_ref",192],[3,193,194,195,196,197,198,199,200,201,202,203],[5,"OFFSET"],[4,204,205],[4,206,207,166],[0,"star",208],[3,209,210,211,206,212,213,214],[4,215,5,134,216],[4,56,217],[5,"UNION"],[4,56,218],[4,56,219],[3,220,208,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245],[5,"COLLATE"],[7,246],[4,56,247],[4,56,248],[4,56,249],[4,56,250],[4,56,251],[0,"ESCAPE",252],[4,56,253],[4,56,254],[0,"NULL",255],[5,"IS"],[5,"BETWEEN"],[5,"AND"],[5,"IN"],[0,"lparen",256],[8,257],[0,"rparen",258],[4,259,206],[0,"literal_value",260],[0,"bind_parameter",261],[4,206,207,196],[0,"column_name",146],[4,262,38],[0,"call_function",263],[4,5,189,38,5,191],[4,264,189,38,265,266,191],[4,267,189,14,191],[4,268,269,270,271,272],[0,"raise_function",273],[0,"column_ref",38],[8,274],[0,"table_name",146],[0,"dot",275],[5,"*"],[4,276,207,206,265,56,277],[4,276,207,206],[4,206,265,56,277],[4,278,279],[4,189,14,191,280],[4,189,80,191],[0,"join_op",281],[0,"join_constraint",282],[5,"HAVING"],[5,"ASC"],[5,"DESC"],[5,"||"],[5,"/"],[5,"%"],[5,"+"],[5,"-"],[5,"<<"],[5,">>"],[5,"&"],[5,"|"],[5,"<="],[5,">="],[5,"<"],[5,">"],[5,"="],[5,"=="],[5,"!="],[5,"<>"],[5,"IS"],[5,"IS NOT"],[5,"IN"],[5,"LIKE"],[5,"GLOB"],[5,"MATCH"],[5,"REGEXP"],[5,"AND"],[5,"OR"],[2,"[A-Za-z0-9_]"],[5,"NOT"],[5,"LIKE"],[5,"GLOB"],[5,"REGEXP"],[5,"MATCH"],[4,56,283],[5,"ISNULL"],[5,"NOTNULL"],[4,56,284],[5,"("],[3,14,285],[5,")"],[8,286],[3,287,288,289,184,290,291,292],[4,293,146],[0,"unary_operator",294],[4,295,5,189,296,5,191],[0,"CAST",297],[0,"AS",298],[0,"type_name",299],[8,300],[0,"CASE",301],[8,38],[7,302],[8,303],[0,"END",304],[4,305,189,306,191],[4,265,5,307],[5,"."],[0,"database_name",146],[0,"table_alias",146],[4,161,308],[8,309],[8,310],[3,311,312],[8,313],[5,"ESCAPE"],[5,"NULL"],[7,314],[4,276,207],[0,"numeric_literal",315],[0,"string_literal",316],[0,"blob_literal",288],[0,"CURRENT_TIME",317],[0,"CURRENT_DATE",317],[0,"CURRENT_TIMESTAMP",317],[5,"?"],[4,5,318],[0,"function_name",146],[8,319],[4,56,320],[4,56,321],[4,322,323],[4,119,324],[4,56,325],[4,326,38,327,38],[4,328,38],[4,56,329],[0,"RAISE",330],[3,331,332],[0,"column_alias",146],[8,333],[3,334,335],[4,265,5,277],[4,5,69],[4,336,337,338],[3,339,340],[4,38,69],[4,341,342],[4,343,344,343],[5,"now"],[3,224,223,345,346],[3,347,348],[5,"CAST"],[5,"AS"],[7,146],[8,349],[0,"EXISTS",350],[5,"CASE"],[0,"WHEN",351],[0,"THEN",352],[0,"ELSE",353],[5,"END"],[4,56,354],[0,"IGNORE",355],[4,356,69,357],[4,265,56,277],[4,358,34,5,359],[4,147,358],[8,360],[8,361],[0,"JOIN",362],[4,363,38],[4,364,5,189,365,5,191],[3,366,367],[8,368],[5,"\""],[6,369],[5,"~"],[5,"NOT"],[4,370,371],[4,5,166],[3,372,373],[4,56,374],[4,56,375],[4,56,376],[4,56,377],[5,"RAISE"],[4,56,378],[3,379,380,381],[0,"error_message",288],[0,"INDEXED",382],[0,"index_name",146],[0,"NATURAL",383],[3,384,385,386],[4,56,387],[0,"ON",388],[0,"USING",389],[4,5,196,390],[4,391,392],[4,393,391],[4,394,395,391],[3,396,397],[8,75],[7,398],[4,189,399,191],[4,189,399,69,399,191],[5,"EXISTS"],[5,"WHEN"],[5,"THEN"],[5,"ELSE"],[5,"IGNORE"],[0,"ROLLBACK",400],[0,"ABORT",401],[0,"FAIL",402],[4,56,403],[4,56,404],[4,405,406],[0,"INNER",407],[0,"CROSS",408],[5,"JOIN"],[4,56,409],[4,56,410],[6,411],[7,412],[8,367],[0,"decimal_point",207],[0,"E",413],[8,414],[0,"escape_char",415],[2,"[^\"]"],[4,38,416],[0,"signed_number",417],[4,56,418],[4,56,419],[4,56,420],[5,"INDEXED"],[5,"NATURAL"],[0,"LEFT",421],[8,422],[4,56,423],[4,56,424],[5,"ON"],[5,"USING"],[4,5,69,5,196],[0,"digit",425],[5,"E"],[3,426,427],[4,428,429],[6,430],[4,395,287],[5,"ROLLBACK"],[5,"ABORT"],[5,"FAIL"],[4,56,431],[0,"OUTER",432],[5,"INNER"],[5,"CROSS"],[2,"[0-9]"],[0,"plus",223],[0,"minus",224],[5,"\\"],[1],[4,5,69,38],[5,"LEFT"],[4,56,433],[5,"OUTER"],[0,"%start",435],[0,"%sql_stmt_list",436],[7,437],[4,438,439,438,440],[0,"%whitespace",8],[8,441],[0,"%semicolon",10],[0,"%sql_stmt",442],[4,443,444],[8,445],[0,"%select_stmt",446],[4,447,448],[4,449,450,451],[0,"%EXPLAIN",452],[8,453],[4,454,455],[8,456],[8,457],[4,438,28],[4,458,459],[0,"%select_core",460],[6,461],[4,462,463,464,465],[4,466,467,468],[0,"%QUERY",469],[0,"%PLAN",470],[4,471,472,473,474,475,476],[4,477,454],[0,"%ORDER",478],[0,"%BY",479],[0,"%ordering_term",480],[6,481],[0,"%LIMIT",482],[0,"%expr",483],[8,484],[4,485,57],[4,485,58],[0,"%SELECT",486],[8,487],[0,"%select_results",488],[8,489],[8,490],[8,491],[0,"%compound_operator",492],[4,485,66],[4,485,67],[4,438,493],[4,438,494,464],[4,485,70],[4,438,495],[4,496,467],[0,"%whitespace1",73],[4,438,74],[3,497,498],[4,499,500],[4,501,502],[4,503,467],[4,504,463,505,506],[3,507,508,509],[4,467,510,511],[0,"%comma",90],[3,512,513,514,515,516,517,518,519],[3,520,494],[0,"%DISTINCT",521],[0,"%ALL",522],[0,"%select_result",523],[6,524],[0,"%FROM",525],[0,"%join_source",526],[0,"%WHERE",527],[0,"%GROUP",528],[7,529],[8,530],[4,531,532],[0,"%INTERSECT",533],[0,"%EXCEPT",534],[8,535],[8,536],[4,519,537,467],[4,519,538,539],[4,519,540,541,467,542],[4,519,543],[4,519,544,540,467],[4,519,540,545,467,546,467],[4,519,540,547,548],[0,"%value",549],[0,"%OFFSET",550],[4,485,130],[4,485,131],[4,438,551],[4,438,494,499],[4,485,133],[4,438,552,553],[4,485,136],[4,485,137],[4,464,494],[4,554,467],[0,"%UNION",555],[8,498],[4,485,140],[4,485,141],[4,538,539],[3,556,557],[0,"%binary_operator",558],[0,"%COLLATE",559],[0,"%collation_name",560],[8,561],[3,562,563,564,565],[8,566],[3,567,568,569],[0,"%IS",570],[0,"%BETWEEN",571],[0,"%AND",572],[0,"%IN",573],[3,574,575],[4,438,576],[4,485,163],[3,577,578,579],[0,"%single_source",580],[6,581],[0,"%HAVING",582],[4,485,170],[0,"%ASC",583],[0,"%DESC",584],[4,438,173],[4,485,174],[0,"%name",175],[0,"%NOT",585],[0,"%LIKE",586],[0,"%GLOB",587],[0,"%REGEXP",588],[0,"%MATCH",589],[4,590,467],[0,"%ISNULL",591],[0,"%NOTNULL",592],[4,561,593],[4,485,185],[4,485,186],[4,485,187],[4,485,188],[4,594,595,596],[0,"%table_ref",597],[3,598,599,600,601,602,603,604,605,606,607,608],[4,609,610],[4,611,612,579],[0,"%star",208],[3,613,614,615,611,616,617,618],[4,619,438,552,620],[4,485,217],[4,485,218],[4,485,219],[4,485,247],[4,485,248],[4,485,249],[4,485,250],[4,485,251],[0,"%ESCAPE",621],[4,485,253],[4,485,254],[0,"%NULL",622],[0,"%lparen",256],[8,623],[0,"%rparen",258],[4,624,611],[0,"%literal_value",625],[0,"%bind_parameter",626],[4,611,612,601],[0,"%column_name",560],[4,627,467],[0,"%call_function",628],[4,438,594,467,438,596],[4,629,594,467,630,631,596],[4,632,594,444,596],[4,633,634,635,636,637],[0,"%raise_function",638],[0,"%column_ref",467],[8,639],[0,"%table_name",560],[0,"%dot",275],[4,640,612,611,630,485,641],[4,640,612,611],[4,611,630,485,641],[4,642,643],[4,594,444,596,644],[4,594,502,596],[0,"%join_op",645],[0,"%join_constraint",646],[4,485,283],[4,485,284],[3,444,647],[8,648],[3,649,650,651,593,652,653,654],[4,293,560],[0,"%unary_operator",655],[4,656,438,594,657,438,596],[0,"%CAST",658],[0,"%AS",659],[0,"%type_name",660],[8,661],[0,"%CASE",662],[8,467],[7,663],[8,664],[0,"%END",665],[4,666,594,667,596],[4,630,438,668],[0,"%database_name",560],[0,"%table_alias",560],[4,575,669],[8,670],[8,671],[3,672,673],[8,674],[7,675],[4,640,612],[0,"%numeric_literal",676],[0,"%string_literal",677],[0,"%blob_literal",650],[0,"%CURRENT_TIME",317],[0,"%CURRENT_DATE",317],[0,"%CURRENT_TIMESTAMP",317],[4,438,318],[0,"%function_name",560],[8,678],[4,485,320],[4,485,321],[4,679,680],[4,540,681],[4,485,325],[4,682,467,683,467],[4,684,467],[4,485,329],[0,"%RAISE",685],[3,686,687],[0,"%column_alias",560],[8,688],[3,689,690],[4,630,438,641],[4,438,494],[4,691,692,693],[3,694,695],[4,467,494],[4,696,697],[4,343,698,343],[3,699,700],[7,560],[8,701],[0,"%EXISTS",702],[0,"%WHEN",703],[0,"%THEN",704],[0,"%ELSE",705],[4,485,354],[0,"%IGNORE",706],[4,707,494,708],[4,630,485,641],[4,709,463,438,710],[4,561,709],[8,711],[8,712],[0,"%JOIN",713],[4,714,467],[4,715,438,594,716,438,596],[3,717,718],[8,719],[6,720],[4,721,722],[4,438,579],[3,723,724],[4,485,374],[4,485,375],[4,485,376],[4,485,377],[4,485,378],[3,725,726,727],[0,"%error_message",650],[0,"%INDEXED",728],[0,"%index_name",560],[0,"%NATURAL",729],[3,730,731,732],[4,485,387],[0,"%ON",733],[0,"%USING",734],[4,438,601,735],[4,736,737],[4,738,736],[4,739,740,736],[3,741,397],[8,497],[7,742],[4,594,743,596],[4,594,743,494,743,596],[0,"%ROLLBACK",744],[0,"%ABORT",745],[0,"%FAIL",746],[4,485,403],[4,485,404],[4,747,748],[0,"%INNER",749],[0,"%CROSS",750],[4,485,409],[4,485,410],[6,751],[7,752],[8,718],[0,"%decimal_point",612],[0,"%E",413],[8,753],[0,"%escape_char",415],[4,467,754],[0,"%signed_number",755],[4,485,418],[4,485,419],[4,485,420],[0,"%LEFT",756],[8,757],[4,485,423],[4,485,424],[4,438,494,438,601],[0,"%digit",425],[3,758,759],[6,760],[4,740,649],[4,485,431],[0,"%OUTER",761],[0,"%plus",223],[0,"%minus",224],[4,438,494,467],[4,485,433]],"nameToUID":{"start":1,"sql_stmt_list":2,"whitespace":5,"semicolon":7,"sql_stmt":9,"select_stmt":14,"EXPLAIN":17,"select_core":24,"QUERY":29,"PLAN":30,"ORDER":33,"BY":34,"ordering_term":35,"LIMIT":37,"expr":38,"SELECT":42,"select_results":44,"compound_operator":48,"whitespace1":56,"comma":69,"DISTINCT":75,"ALL":76,"select_result":77,"FROM":79,"join_source":80,"WHERE":81,"GROUP":82,"INTERSECT":86,"EXCEPT":87,"value":98,"OFFSET":99,"UNION":110,"binary_operator":116,"COLLATE":117,"collation_name":118,"IS":123,"BETWEEN":124,"AND":125,"IN":126,"single_source":134,"HAVING":138,"ASC":142,"DESC":143,"name":146,"NOT":147,"LIKE":148,"GLOB":149,"REGEXP":150,"MATCH":151,"ISNULL":153,"NOTNULL":154,"table_ref":161,"star":166,"ESCAPE":181,"NULL":184,"lparen":189,"rparen":191,"literal_value":193,"bind_parameter":194,"column_name":196,"call_function":198,"raise_function":203,"column_ref":204,"table_name":206,"dot":207,"join_op":215,"join_constraint":216,"unary_operator":262,"CAST":264,"AS":265,"type_name":266,"CASE":268,"END":272,"database_name":276,"table_alias":277,"numeric_literal":287,"string_literal":288,"blob_literal":289,"CURRENT_TIME":290,"CURRENT_DATE":291,"CURRENT_TIMESTAMP":292,"function_name":295,"RAISE":305,"column_alias":307,"EXISTS":324,"WHEN":326,"THEN":327,"ELSE":328,"IGNORE":331,"JOIN":338,"error_message":357,"INDEXED":358,"index_name":359,"NATURAL":360,"ON":363,"USING":364,"ROLLBACK":379,"ABORT":380,"FAIL":381,"INNER":385,"CROSS":386,"decimal_point":393,"E":394,"escape_char":396,"signed_number":399,"LEFT":405,"digit":412,"OUTER":422,"plus":426,"minus":427,"%start":434,"%sql_stmt_list":435,"%whitespace":438,"%semicolon":440,"%sql_stmt":441,"%select_stmt":444,"%EXPLAIN":447,"%select_core":454,"%QUERY":458,"%PLAN":459,"%ORDER":462,"%BY":463,"%ordering_term":464,"%LIMIT":466,"%expr":467,"%SELECT":471,"%select_results":473,"%compound_operator":477,"%whitespace1":485,"%comma":494,"%DISTINCT":497,"%ALL":498,"%select_result":499,"%FROM":501,"%join_source":502,"%WHERE":503,"%GROUP":504,"%INTERSECT":508,"%EXCEPT":509,"%value":519,"%OFFSET":520,"%UNION":531,"%binary_operator":537,"%COLLATE":538,"%collation_name":539,"%IS":544,"%BETWEEN":545,"%AND":546,"%IN":547,"%single_source":552,"%HAVING":554,"%ASC":556,"%DESC":557,"%name":560,"%NOT":561,"%LIKE":562,"%GLOB":563,"%REGEXP":564,"%MATCH":565,"%ISNULL":567,"%NOTNULL":568,"%table_ref":575,"%star":579,"%ESCAPE":590,"%NULL":593,"%lparen":594,"%rparen":596,"%literal_value":598,"%bind_parameter":599,"%column_name":601,"%call_function":603,"%raise_function":608,"%column_ref":609,"%table_name":611,"%dot":612,"%join_op":619,"%join_constraint":620,"%unary_operator":627,"%CAST":629,"%AS":630,"%type_name":631,"%CASE":633,"%END":637,"%database_name":640,"%table_alias":641,"%numeric_literal":649,"%string_literal":650,"%blob_literal":651,"%CURRENT_TIME":652,"%CURRENT_DATE":653,"%CURRENT_TIMESTAMP":654,"%function_name":656,"%RAISE":666,"%column_alias":668,"%EXISTS":681,"%WHEN":682,"%THEN":683,"%ELSE":684,"%IGNORE":686,"%JOIN":693,"%error_message":708,"%INDEXED":709,"%index_name":710,"%NATURAL":711,"%ON":714,"%USING":715,"%ROLLBACK":725,"%ABORT":726,"%FAIL":727,"%INNER":731,"%CROSS":732,"%decimal_point":738,"%E":739,"%escape_char":741,"%signed_number":743,"%LEFT":747,"%digit":752,"%OUTER":757,"%plus":758,"%minus":759}};


function Parser(/*String | CompiledGrammar*/ aGrammar)
{
    if (typeof aGrammar.valueOf() === "string")
        this.compiledGrammar = new (require("./compiledgrammar"))(aGrammar);
    else
        this.compiledGrammar = aGrammar;

    return this;
}

module.exports = Parser;

Parser.prototype.parse = function(input)
{
    return parse(this.compiledGrammar, input);
}

var NAME                = 0,
    DOT                 = 1,
    CHARACTER_CLASS     = 2,
    ORDERED_CHOICE      = 3,
    SEQUENCE            = 4,
    STRING_LITERAL      = 5,
    ZERO_OR_MORE        = 6,
    ONE_OR_MORE         = 7,
    OPTIONAL            = 8,
    NEGATIVE_LOOK_AHEAD = 9,
    POSITIVE_LOOK_AHEAD = 10,
    ERROR_NAME          = 11,
    ERROR_CHOICE        = 12;

function parse(aCompiledGrammar, input, name)
{
    var node = new SyntaxNode("#document", input, 0, 0),
        table = aCompiledGrammar.table,
        nameToUID = aCompiledGrammar.nameToUID;

    name = name || "start";

    // This is a stupid check.
    if (aCompiledGrammar.nameToUID["EOF"] !== undefined)
        table[0] = [SEQUENCE, nameToUID[name], nameToUID["EOF"]];

    if (!evaluate(new context(input, table), node, table, 0))
    {
        // This is a stupid check.
        if (aCompiledGrammar.nameToUID["EOF"] !== undefined)
            table[0] = [SEQUENCE, nameToUID["%" + name], nameToUID["EOF"]];

        node.children.length = 0;

        evaluate(new context(input, table), node, table, 0);

        node.traverse(
        {
            traverseTextNodes:false,
            enteredNode:function(node)
            {
                if (node.error)
                    console.log(node.message() + "\n");
            }
        });
    }

    return node;
}

exports.parse = parse;

function context(input, table)
{
    this.position = 0;
    this.input = input;
    this.memos = [];
    for (var i=0;i<table.length;++i)
        this.memos[i] = [];
}

function evaluate(context, parent, rules, rule_id)
{
    var rule = rules[rule_id],
        type = rule[0],
        input_length = context.input.length,
        memos = context.memos[rule_id];

    var uid = context.position,
        entry = memos[uid];

    if (entry === false)
        return false;
    else if (entry === true)
        return true;
    else if (entry)
    {
        if (parent)
            parent.children.push(entry.node);
        context.position = entry.position;
        return true;
    }

    switch (type)
    {
        case NAME:
        case ERROR_NAME:
            var node = new SyntaxNode(rule[1], context.input, context.position, 0, rule[3]);
            if (!evaluate(context, node, rules, rule[2]))
            {
                memos[uid] = false;
                return false;
            }
            node.range.length = context.position - node.range.location;
            memos[uid] = { node:node, position:context.position };

            if (parent)
                parent.children.push(node);
            return true;

        case CHARACTER_CLASS:
            var character = context.input.charAt(context.position);

            if (typeof rule[1].valueOf() === "string")
                rule[1] = new RegExp(rule[1], "g");

            if (character.match(rule[1]))
            {
                if (parent)
                    parent.children.push(character);
                ++context.position;
                return true;
            }
            memos[uid] = false;
            return false;

        case SEQUENCE:
            var index = 1,
                count = rule.length;

            for (; index < count; ++index)
                if (!evaluate(context, parent, rules, rule[index]))
                {
                    memos[uid] = false;
                    return false;
                }

            return true;

        case ORDERED_CHOICE:
        case ERROR_CHOICE:
            var index = 1,
                count = rule.length,
                position = context.position;

            for (; index < count; ++index)
            {
                // cache opportunity here.
                var child_count = parent && parent.children.length;

                if (evaluate(context, parent, rules, rule[index]))
                    return true;

                if (parent)
                    parent.children.length = child_count;
                context.position = position;
            }
            memos[uid] = false;
            return false;

        case STRING_LITERAL:
            var string = rule[1],
                string_length = string.length;

            if (string_length + context.position > input_length)
            {
                memos[uid] = false;
                return false;
            }

            var index = 0;

            for (; index < string_length; ++context.position, ++index)
                if (context.input.charCodeAt(context.position) !== string.charCodeAt(index))
                {
                    context.position -= index;
                    memos[uid] = false;
                    return false;
                }

//            memos[uid] = string;
            if (parent)
                parent.children.push(string);

            return true;
        case DOT:
            if (context.position < input_length)
            {
                if (parent)
                    parent.children.push(context.input.charAt(context.position));
                ++context.position;
                return true;
            }
            memos[uid] = false;
            return false;
        case POSITIVE_LOOK_AHEAD:
        case NEGATIVE_LOOK_AHEAD:
            var position = context.position,
                result = evaluate(context, null, rules, rule[1]) === (type === POSITIVE_LOOK_AHEAD);
            context.position = position;
            memos[uid] = result;

            return result;

        case ZERO_OR_MORE:
            var child,
                position = context.position,
                childCount = parent && parent.children.length;

            while (evaluate(context, parent, rules, rule[1]))
            {
                position = context.position,
                childCount = parent && parent.children.length;
            }

            context.position = position;
            if (parent)
                parent.children.length = childCount;

            return true;

        case ONE_OR_MORE:
            var position = context.position,
                childCount = parent && parent.children.length;
            if (!evaluate(context, parent, rules, rule[1]))
            {
                memos[uid] = false;
                context.position = position;
                if (parent)
                    parent.children.length = childCount;
                return false;
            }
            position = context.position,
            childCount = parent && parent.children.length;
            while (evaluate(context, parent, rules, rule[1]))
            {
                position = context.position;
                childCount = parent && parent.children.length;
            }
            context.position = position;
            if (parent)
                parent.children.length = childCount;
            return true;

        case OPTIONAL:
            var position = context.position,
                childCount = parent && parent.children.length;

            if (!evaluate(context, parent, rules, rule[1]))
            {
                context.position = position;

                if (parent)
                    parent.children.length = childCount;
            }

            return true;
    }
}

function SyntaxNode(/*String*/ aName, /*String*/ aSource, /*Number*/ aLocation, /*Number*/ aLength, /*String*/anErrorMessage)
{
    this.name = aName;
    this.source = aSource;
    this.range = { location:aLocation, length:aLength };
    this.children = [];

    if (anErrorMessage)
        this.error = anErrorMessage;
}

SyntaxNode.prototype.report = function()
{
    var source = this.source,
        lineNumber = 1,
        index = 0,
        start = 0,
        length = source.length,
        range = this.range;

    for (; index < range.location; ++index)
        if (source.charAt(index) === '\n')
        {
            ++lineNumber;
            start = index + 1;
        }

    for (; index < length; ++index)
        if (source.charAt(index) === '\n')
            break;

    var visualization = source.substring(start, index) + "\n";

    visualization += (new Array(this.range.location - start + 1)).join(" ");
    visualization += (new Array(Math.min(range.length, visualization.length) + 1)).join("^");

    return  {
                visualization: visualization,
                lineNumber: lineNumber
            };
}

SyntaxNode.prototype.message = function()
{
    var report = this.report(),
        message = report.visualization + "\n";

    message += "ERROR line " + report.lineNumber + ": " + this.error;

    return message;
}

SyntaxNode.prototype.toString = function(/*String*/ spaces)
{
    if (!spaces)
        spaces = "";

    var string = spaces + this.name +  " <" + this.innerText() + "> ",
        children = this.children,
        index = 0,
        count = children.length;

    for (; index < count; ++index)
    {
        var child = children[index];

        if (typeof child === "string")
            string += "\n" + spaces + "\t" + child;

        else
            string += "\n" + children[index].toString(spaces + '\t');
    }

    return string;
}

SyntaxNode.prototype.innerText = function()
{
    var range = this.range;

    return this.source.substr(range.location, range.length);
}

SyntaxNode.prototype.traverse = function(walker)
{
    if (!walker.enteredNode || walker.enteredNode(this) !== false)
    {
        var children = this.children,
            index = 0,
            count = children && children.length;

        for (; index < count; ++index)
        {
            var child = children[index];

            if (typeof child !== "string")
                child.traverse(walker);

            else if (walker.traversesTextNodes)
            {
                walker.enteredNode(child);

                if (walker.exitedNode)
                    walker.exitedNode(child);
            }
        }
    }

    if (walker.exitedNode)
        walker.exitedNode(this);
}


if (typeof system !== "undefined")
{
    var parser = new Parser(compiledGrammar);

    exports.parse = function(input) { return parser.parse(input); }
}
else
    module.exports = new Parser(compiledGrammar);

